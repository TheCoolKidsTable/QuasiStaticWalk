clear;
clc;
close all; 

%% Forward Kinematics (4 Link Robot)
% Link Lengths
L1 = 1;
L2 = 1;
L3 = 1;
L4 = 1;

% Complete Homogeneous Transformation
T = @(j) [cos(j(1)+j(2)+j(3)+j(4)) -sin(j(1)+j(2)+j(3)+j(4)) 0 L1*cos(j(1))+L2*cos(j(1)+j(2))+L3*cos(j(1)+j(2)+j(3))+L4*cos(j(1)+j(2)+j(3)+j(4));
          sin(j(1)+j(2)+j(3)+j(4)) cos(j(1)+j(2)+j(3)+j(4)) 0 L1*sin(j(1))+L2*sin(j(1)+j(2))+L3*sin(j(1)+j(2)+j(3))+L4*sin(j(1)+j(2)+j(3)+j(4));
          0 0 1 0;
          0 0 0 1;]

% End effector position [x,y]
end_effector = @(j) [L1*cos(j(1))+L2*cos(j(1)+j(2))+L3*cos(j(1)+j(2)+j(3))+L4*cos(j(1)+j(2)+j(3)+j(4)), L1*sin(j(1))+L2*sin(j(1)+j(2))+L3*sin(j(1)+j(2)+j(3))+L4*sin(j(1)+j(2)+j(3)+j(4))];
% Cost function
ed = [1,1]; %Desired end effector positon (x,y)
cost = @(joint_angles) norm(ed - end_effector(joint_angles));
params0 = [pi/2,0,-pi/2,0];
[params_opt, costVal] = fminsearch(cost,params0);
position_found = end_effector(params_opt);
figure(1);
plot(position_found(1),position_found(2),'r.');
%% Track a half-circle path
% Define Trajectory
t = (0:0.2:10)'; % Time
count = length(t);
center = [1.5 0];
radius = 0.75;
theta = t*(2*pi/t(end))/2;
points = center + radius*[-cos(theta) sin(theta)];

%% Find optimal solution at each point along the circle
% joint_angles = zeros(51,4);
% for i = 1:51
%     ed = points(i,:);
%     cost = @(joint_angles) norm(ed - end_effector(joint_angles));
%     [params_opt, costVal] = fminsearch(cost,params0);
%     opt_joint_angles(i,:) = params_opt
% end
% 
% % Plot
% figure(2)
% hold on;
% for i = 1:51
% plot(points(i,1),points(i,2),'.r')
% position_reached = end_effector(opt_joint_angles(i,:));
% plot(position_reached(1),position_reached(2),'b.');
% end
% plotRobot(opt_joint_angles)
%% Quasi-static CoM Constraint within the cost function
% Define mass for each link
M1 = 1;
M2 = 1;
M3 = 1;
M4 = 1;
% Define distance to CoM from joint for each link
r1 = 0.5;
r2 = 0.5;
r3 = 0.5;
r4 = 0.5;
% Centre of mass function: CoM = x*m/m
CoM = @(j) (r1*cos(j(1))*M1 + (L1*cos(j(1))+r2*cos(j(1)+j(2)))*M2 + (L1*cos(j(1))+ L2*cos(j(1)+j(2))+r3*cos(j(1)+j(2)+j(3)))*M3 + (L3*cos(j(1))+ L2*cos(j(1)+j(2))+L3*cos(j(1)+j(2)+j(3))+r4*cos(j(1)+j(2)+j(3)+j(4)))*M4)/(M1+M2+M3+M4)
%% Find optimal solution at each point along the circle
joint_angles = zeros(51,4);
for i = 1:51
    ed = points(i,:);
    cost = @(joint_angles) norm(ed - end_effector(joint_angles))+norm(CoM(joint_angles));
    [params_opt, costVal] = fminsearch(cost,params0);
    opt_joint_angles(i,:) = params_opt
end


%% Plot the robot moving
plotRobot(opt_joint_angles)
