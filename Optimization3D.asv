 clc;
clear;
close all;
%% Params
robot = importrobot('NUgus.urdf');
robot.DataFormat = 'column';
param.NumBodies = robot.NumBodies;
param.stepHeight = 0.04;
param.stepLength = 0.04;
param.stepWidth = 0.11;
param.stepTime = 0.5;
param.Ts = 0.01;
param.numSamples = param.stepTime/param.Ts;
%% Helper Functions
position = @(transform) transform(1:3,4);
rotation = @(transform) transform(1:3,1:3);
%% 1: Trajectory Plan 1
trajectory = generateFootTrajectory(param) + position(getTransform(robot,homeConfiguration(robot),'right_foot'));
sim_time = length(trajectory);
%% 2: Inverse Kinematics 1
opt_joint_angles = zeros(param.NumBodies,sim_time);
joints0 = zeros(param.NumBodies,1)
storedTrajectory = zeros(3,sim_time);
for i = 1:sim_time
    cost = @(joint_angles) norm(rotation(getTransform(robot,joint_angles,'left_foot'))*trajectory(:,i) - position(getTransform(robot,joint_angles,'right_foot','left_foot'))) ...
                           + 0.5*trace(eye(3)-rotation(getTransform(robot,joint_angles,'left_foot','right_foot')));
    A = [];
    b = [];
    Aeq = [];
    beq = [];
    lb = [];
    ub = [];
    nlconstraint = @(joint_angles) nonlconFoot(joint_angles,robot);
    [joints_opt, costVal] = fmincon(cost,joints0,A,b,Aeq,beq,lb,ub,nlconstraint);
    joints0 = joints_opt; %warm-start next 
    opt_joint_angles(:,i) = joints_opt;
end
%% Plot
param.trajectory = trajectory;
plot3DRobot(opt_joint_angles,robot,param);