function [opt_joint_angles] = inverseKinematics(robot,xd,param)
%% Helper Functions

rotation = @(kinematics) kinematics.R;
xe = @(kinematics) kinematics.xe;
%% Run optimization
sim_time = length(xd);
opt_joint_angles = zeros(param.numBodies,sim_time);
joints0 = param.initialConditions;
for i = 1:sim_time
    cost = @(joint_angles) norm(xd(:,i) - xe(kinematics3D(joint_angles,param))) ...
                           + 0.5*trace(eye(3)-rotation(getTransform(robot,joint_angles,param.swingFoot,param.supportFoot))) ...
                           + 0.5*trace(eye(3)-rotation(getTransform(robot,joint_angles,'right_ankle')));
    nlconstraint = @(joint_angles) nonlconFoot(joint_angles,robot,param,joints0);
    [joints_opt] = fmincon(cost,joints0,[],[],[],[],[],[],nlconstraint);
    joints0 = joints_opt; %warm-start next optimization
    opt_joint_angles(:,i) = joints_opt;
end
end

